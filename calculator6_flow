#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

enum States {
    start, resolve_parentheses, handle_exponent, handle_mult_div, handle_add_sub, stop
};

bool shouldRemove(char c) {
    return !isdigit(c) && c != '+' && c != '-' && c != '*' && c != '/' && c != '^' && c != '(' && c != ')' && c != 'e' && c != '.' && c != '%';
}

void fsm(string& expression);

double applyOperator(double left, double right, char op) {
    switch (op) {
        case '+': return left + right;
        case '-': return left - right;
        case '*': return left * right;
        case '/': return left / right;
        case '%': return fmod(left,right);
        case '^': return pow(left, right);
        default: throw invalid_argument("Unknown operator! Try again."); //redundancy?
    }
}

string evaluateSequentially(const string& expression, const string& targetOperators) {
    istringstream iss(expression);
    vector<double> numbers;
    vector<char> operators;
    double num;
    char op;

    iss >> num;
    numbers.push_back(num);

    while (iss >> op >> num) {
        operators.push_back(op);
        numbers.push_back(num);
    }

    size_t i = 0;
    while (i < operators.size()) {
        if (targetOperators.find(operators[i]) != string::npos) {
            double result = applyOperator(numbers[i], numbers[i + 1], operators[i]);
            numbers[i] = result;
            numbers.erase(numbers.begin() + 1 + i);
            operators.erase(operators.begin() + i);
        } else {
            ++i;
        }
    }

    ostringstream newExpression;
    newExpression << numbers[0];
    for (size_t i = 0; i < operators.size(); ++i) {
        newExpression << operators[i] << numbers[i + 1];
    }

    return newExpression.str();
}

string resolveInnermostParentheses(string expression) {
    size_t startPos = expression.find_last_of('(');
    while (startPos != string::npos) {
        size_t endPos = expression.find(')', startPos);
        if (endPos == string::npos) {
            throw invalid_argument("Mismatched parentheses! Try again.");
        }
        if (endPos == startPos + 1) {
            throw invalid_argument("Empty parentheses are not allowed! Try again.");
        }

        string subExpr = expression.substr(startPos + 1, endPos - startPos - 1);

        string result = subExpr;
        fsm(result);

        expression = expression.substr(0, startPos) + result + expression.substr(endPos + 1);
        startPos = expression.find_last_of('(');
    }

    return expression;
}

void fsm(string& expression) {
    States state = start;

    while (state != stop) {
        switch (state) {
            case start:
                state = resolve_parentheses;
                break;

            case resolve_parentheses:
                expression = resolveInnermostParentheses(expression);
                state = handle_exponent;
                break;

            case handle_exponent:
                expression = evaluateSequentially(expression, "^");
                state = handle_mult_div;
                break;

            case handle_mult_div:
                expression = evaluateSequentially(expression, "*/%");
                state = handle_add_sub;
                break;

            case handle_add_sub:
                expression = evaluateSequentially(expression, "+-");
                state = stop;
                break;

            case stop:
                break;
        }
    }
}

void doThings() {
    while (true) {
        string expression;
        cout << "Enter the arithmetic expression (or type 'exit' to quit): ";
        getline(cin, expression);

        if (expression == "exit") {
        cout << "Thanks for trying out my C++ calculator" << endl;
            break;
        }
        
        if (expression.empty()) {
        cout << "No user input at all! Try again." << endl;
            continue;
        }

        expression.erase(remove_if(expression.begin(), expression.end(), shouldRemove), expression.end());

        if (expression.empty()) {
        cout << "No valid input! No characters recognized. Try again." << endl;
            continue;
        }
        
        try {
            fsm(expression);
        } catch (const invalid_argument& e) {
            cout << "Error: " << e.what() << endl;
            continue;
        }

        cout << "Result: " << expression << endl;
        expression = "0";
    }
}

int main() {
    doThings();
    return 0;
}
